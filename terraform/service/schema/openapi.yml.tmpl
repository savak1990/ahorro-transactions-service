openapi: 3.0.3
info:
  version: 1.0.0
  description: |
    API for managing user transactions and categories in the Ahorro platform.
servers:
  - url: http://localhost:8080

paths:
  /health:
    get:
      summary: Health check
      tags: [system]
      responses:
        '200':
          description: Health check OK
          content:
            application/json:
              schema:
                type: object
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    options:
      summary: CORS support
      tags: [system]
      responses:
        '200':
          description: CORS OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'
  /info:
    get:
      summary: Service info
      tags: [system]
      responses:
        '200':
          description: Service info
          content:
            application/json:
              schema:
                type: object
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    options:
      summary: CORS support
      tags: [system]
      responses:
        '200':
          description: CORS OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'
  /transactions:
    post:
      summary: Create a new transaction
      tags: [transactions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreateRequest'
      responses:
        '201':
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    get:
      summary: List transactions for a user
      tags: [transactions]
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
          required: true
        - in: query
          name: type
          schema:
            type: string
            enum: [expense, income, movement]
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [transacted_at, created_at, updated_at, amount]
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
        - in: query
          name: count
          schema:
            type: integer
        - in: query
          name: startKey
          schema:
            type: string
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListResponse'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    options:
      summary: CORS support
      tags: [transactions]
      responses:
        '200':
          description: CORS OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'
  /transactions/{transaction_id}:
    get:
      summary: Get transaction details
      tags: [transactions]
      parameters:
        - in: path
          name: transaction_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    put:
      summary: Update transaction
      tags: [transactions]
      parameters:
        - in: path
          name: transaction_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpdateRequest'
      responses:
        '200':
          description: Transaction updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    delete:
      summary: Delete transaction
      tags: [transactions]
      parameters:
        - in: path
          name: transaction_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Transaction deleted
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    options:
      summary: CORS support
      tags: [transactions]
      responses:
        '200':
          description: CORS OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'
  /categories:
    get:
      summary: List categories for a user
      tags: [categories]
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: startKey
          schema:
            type: string
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryListResponse'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    options:
      summary: CORS support
      tags: [categories]
      responses:
        '200':
          description: CORS OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

components:
  schemas:
    Transaction:
      type: object
      properties:
        transaction_id:
          type: string
        user_id:
          type: string
        group_id:
          type: string
        type:
          type: string
          enum: [expense, income, movement]
        amount:
          type: number
        balance_id:
          type: string
        from_balance_id:
          type: string
        to_balance_id:
          type: string
        category:
          type: string
        description:
          type: string
        approved_at:
          type: string
          format: date-time
        transacted_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
    TransactionCreateRequest:
      allOf:
        - $ref: '#/components/schemas/Transaction'
      required:
        - user_id
        - group_id
        - type
        - amount
        - balance_id
        - category
        - transacted_at
    TransactionUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/Transaction'
      required:
        - user_id
        - group_id
        - type
        - amount
        - balance_id
        - category
        - transacted_at
    TransactionListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        nextKey:
          type: string
    Category:
      type: object
      properties:
        name:
          type: string
        image_url:
          type: string
        score:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
    CategoryListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        nextKey:
          type: string

x-amazon-apigateway-request-validators:
  validate-all:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: "validate-all"
