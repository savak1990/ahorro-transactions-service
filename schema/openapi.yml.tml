openapi: 3.0.3
info:
  version: 1.0.0
  title: "Ahorro Transactions Service API"
  description: |
    API for managing user transactions, balances, and categories in the Ahorro platform.
    
    This service provides endpoints for:
    - Creating and managing financial transactions with multiple entries
    - Managing user balances/accounts
    - Managing transaction categories
    - Retrieving transaction history with filtering
  contact:
    name: "Ahorro Development Team"
  license:
    name: "Proprietary"

servers:
  - url: http://localhost:8080
    description: "Local development server"
  - url: https://api-ahorro-transactions-${INSTANCE_NAME}.${DOMAIN_NAME}:443
    description: "User deployment server"
  - url: https://api-ahorro-transactions-stable.${DOMAIN_NAME}:443
    description: "Stable deployment server"

security:
  - bearerAuth: []

paths:
  /transactions:
    post:
      summary: Create transaction(s)
      description: |
        Creates one or more financial transactions. Supports both single transactions and batch operations.
        
        For single transactions: Include expense, income, or movement transaction with entries.
        For batch transactions: Include multiple transactions (max 5) for movement operations.
        Movement operations should include both move_out and move_in transactions with same operationId.
      tags: [transactions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateTransactionRequest'
                - $ref: '#/components/schemas/CreateTransactionsRequest'
            examples:
              expense_transaction:
                summary: "Grocery shopping with multiple items"
                value:
                  userId: "99bb2200-0011-2233-4455-667788990011"
                  groupId: "88aa1100-0011-2233-4455-667788990011"
                  balanceId: "ba001111-1111-1111-1111-111111111111"
                  type: "expense"
                  merchantId: "4e001234-1234-5678-9abc-def012345678"
                  transactedAt: "2024-06-19T12:00:00Z"
                  transactionEntries:
                    - description: "Organic vegetables"
                      amount: 4550
                      categoryId: "ca001111-1111-1111-1111-111111111111"
                    - description: "Cleaning supplies"
                      amount: 2875
                      categoryId: "ca005555-5555-5555-5555-555555555555"
              income_transaction:
                summary: "Monthly salary"
                value:
                  userId: "99bb2200-0011-2233-4455-667788990011"
                  groupId: "88aa1100-0011-2233-4455-667788990011"
                  balanceId: "ba001111-1111-1111-1111-111111111111"
                  type: "income"
                  merchantId: "4e001234-1234-5678-9abc-def012345678"
                  approvedAt: "2024-06-19T09:00:00Z"
                  transactedAt: "2024-06-19T09:00:00Z"
                  transactionEntries:
                    - description: "Monthly salary"
                      amount: 350000
                      categoryId: "ca012222-2222-2222-2222-222222222222"
              movement_batch_transaction:
                summary: "Transfer money between accounts (batch)"
                value:
                  transactions:
                    - userId: "99bb2200-0011-2233-4455-667788990011"
                      groupId: "88aa1100-0011-2233-4455-667788990011"
                      balanceId: "ba001111-1111-1111-1111-111111111111"
                      type: "move_out"
                      transactedAt: "2024-06-19T14:30:00Z"
                      transactionEntries:
                        - description: "Transfer to savings account"
                          amount: 50000
                          categoryId: "c47ac10b-58cc-4372-a567-0e02b2c3d4b1"
                    - userId: "99bb2200-0011-2233-4455-667788990011"
                      groupId: "88aa1100-0011-2233-4455-667788990011"
                      balanceId: "ba002222-2222-2222-2222-222222222222"
                      type: "move_in"
                      transactedAt: "2024-06-19T14:30:00Z"
                      transactionEntries:
                        - description: "Transfer from checking account"
                          amount: 50000
                          categoryId: "c47ac10b-58cc-4372-a567-0e02b2c3d4b1"
      responses:
        '201':
          description: Transaction(s) created successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CreateTransactionResponse'
                  - $ref: '#/components/schemas/CreateTransactionsResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    get:
      summary: List transaction entries
      description: |
        Retrieves a paginated list of transaction entries. Returns flattened transaction entries
        with all related data (transaction, balance, category information).
        At least one of userId or groupId must be provided.
      tags: [transactions]
      parameters:
        - name: groupId
          in: query
          description: "Filter transactions by group ID. Required if userId is not provided."
          schema:
            type: string
            format: uuid
          example: "88aa1100-0011-2233-4455-667788990011"
        - name: userId
          in: query
          description: "Filter transactions by user ID. Required if groupId is not provided."
          schema:
            type: string
            format: uuid
          example: "99bb2200-0011-2233-4455-667788990011"
        - name: balanceId
          in: query
          description: | 
            Filter transactions by balance/account ID
          style: form
          explode: false
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
          example: [ba001111-1111-1111-1111-111111111111]
        - name: type
          in: query
          description: "Filter by transaction type"
          style: form
          explode: false
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [init, expense, income, move_in, move_out]
            example: [expense, income]
        - name: categoryId
          in: query
          description: | 
            Filter by category ID. You can specify list of categoryIds in 
            coma-separated and exploded formats. Note that if you specify
            categoryGroupId it will return transactions using OR operations.
            If you specify other filters, like merhants or balanceId or type
            It will use AND operation.
          style: form
          explode: false
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: categoryGroupId
          in: query
          description: |
            Filter by categoryGroupID. You can specify list of categoryGroupIds in
            coma-separated and exploded formats. Note that if you specify
            categoryId it will return transactions using OR operation.
            If you specify other filters, like merchants or balanceId or type
            It will use AND operation.
          style: form
          explode: false
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: merchantId
          in: query
          description: |
            Filter transactions by merchant ID. You can specify list of merchantIds in
            coma-separated and exploded formats. Note that if you specify
            categoryId or categoryGroupId it will return transactions using AND operation.
          style: form
          explode: false
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: transactionId
          in: query
          description: "Filter transaction entries by specific transaction ID"
          style: form
          explode: false
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: operationId
          in: query
          description: |
            Filter transaction entries by specific operation ID.          style: form
          explode: false
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: startTime
          in: query
          description: "Filter transactions from this date/time (ISO 8601)"
          schema:
            type: string
            format: date-time
          example: "2025-01-01T00:00:00Z"
        - name: endTime
          in: query
          description: "Filter transactions until this date/time (ISO 8601)"
          schema:
            type: string
            format: date-time
          example: "2025-12-31T23:59:59Z"
        - name: includeDeleted
          in: query
          description: "Include soft-deleted transactions"
          schema:
            type: boolean
            default: false
          example: false
        - name: sortedBy
          in: query
          description: "Field to sort by"
          schema:
            type: string
            enum: [transactedAt, createdAt, amount]
            default: transactedAt
          example: "transactedAt"
        - name: order
          in: query
          description: "Sort order"
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          example: "desc"
        - name: count
          in: query
          description: "Number of items to return per page"
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          example: 20
      responses:
        '200':
          description: List of transaction entries retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionEntryListResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    options:
      summary: CORS preflight for transactions endpoint
      tags: [transactions-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /transactions/stats:
    get:
      summary: Get transaction statistics
      description: |
        Retrieves aggregated transaction statistics grouped by currency and transaction type.
        Supports filtering by various parameters including date range, category, balance, etc.
      tags: [transactions]
      parameters:
        - name: userId
          in: query
          description: "Filter by user ID"
          schema:
            type: string
            format: uuid
          example: "99bb2200-0011-2233-4455-667788990011"
        - name: groupId
          in: query
          description: "Filter by group ID"
          schema:
            type: string
            format: uuid
          example: "88aa1100-0011-2233-4455-667788990011"
        - name: balanceId
          in: query
          description: | 
            Filter transactions by balance/account ID
          style: form
          explode: false
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
          example: [ba001111-1111-1111-1111-111111111111]
        - name: type
          in: query
          description: "Filter by transaction type"
          style: form
          explode: false
          required: true
          schema:
            type: string
            enum: [init, expense, income, move_in, move_out]
          example: expense
        - name: categoryId
          in: query
          description: | 
            Filter by category ID. You can specify list of categoryIds in 
            coma-separated and exploded formats. Note that if you specify
            categoryGroupId it will return transactions using OR operations.
            If you specify other filters, like merhants or balanceId or type
            It will use AND operation.
          style: form
          explode: false
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: categoryGroupId
          in: query
          description: |
            Filter by categoryGroupID. You can specify list of categoryGroupIds in
            coma-separated and exploded formats. Note that if you specify
            categoryId it will return transactions using OR operation.
            If you specify other filters, like merchants or balanceId or type
            It will use AND operation.
          style: form
          explode: false
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: merchantId
          in: query
          description: |
            Filter transactions by merchant ID. You can specify list of merchantIds in
            coma-separated and exploded formats. Note that if you specify
            categoryId or categoryGroupId it will return transactions using AND operation.
          style: form
          explode: false
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: startTime
          in: query
          description: "Filter transactions from this date (inclusive)"
          schema:
            type: string
            format: date-time
          example: "2025-01-01T00:00:00Z"
        - name: endTime
          in: query
          description: "Filter transactions until this date (inclusive)"
          schema:
            type: string
            format: date-time
          example: "2025-12-31T23:59:59Z"
        - name: grouping
          in: query
          description: "Group results by this field"
          schema:
            type: string
            enum: [
              balance, 
              category, 
              categoryGroup, 
              currency, 
              merchant,
              month,
              quarter,
              year,
              week,
              day
            ]
            default: currency
          example: currency
        - name: displayCurrency
          in: query
          description: "Currency to display results in (case insensitive). Supported: EUR, USD, GBP, JPY, UAH, BYN"
          schema:
            type: string
            default: usd
          example: EUR
        - name: limit
          in: query
          description: "Maximum number of items to return"
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 50
        - name: sort
          in: query
          description: "Field to sort results by"
          schema:
            type: string
            enum: [amount, count, label]
            default: amount
          example: amount
        - name: order
          in: query
          description: "Sort order"
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          example: desc
      responses:
        '200':
          description: Transaction statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatsResponse'
              examples:
                monthly_stats:
                  summary: "Monthly transaction statistics"
                  value:
                    items:
                      - label: "Food & Dining"
                        amount: 125043
                        currency: "EUR"
                        count: 15
                        icon: "https://example.com/icons/food.png"
                      - label: "Transportation"
                        amount: 85000
                        currency: "EUR"
                        count: 8
                        icon: "https://example.com/icons/transport.png"
                      - label: "Salary"
                        amount: 300000
                        currency: "EUR"
                        count: 2
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    options:
      summary: CORS preflight for transaction stats endpoint
      tags: [transactions-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /transactions/{transaction_id}:
    get:
      summary: Get transaction details
      description: Retrieves a specific transaction by ID with all its entries and related data
      tags: [transactions]
      parameters:
        - name: transaction_id
          in: path
          required: true
          description: "Unique identifier for the transaction"
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Transaction found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleTransactionDto'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    put:
      summary: Update transaction
      description: Updates an existing transaction with new data
      tags: [transactions]
      parameters:
        - name: transaction_id
          in: path
          required: true
          description: "Unique identifier for the transaction"
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTransactionRequest'
      responses:
        '200':
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    delete:
      summary: Delete transaction
      description: Soft deletes a transaction and all its entries
      tags: [transactions]
      parameters:
        - name: transaction_id
          in: path
          required: true
          description: "Unique identifier for the transaction"
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '204':
          description: Transaction deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    options:
      summary: CORS preflight for specific transaction endpoint
      tags: [transactions-cors]
      security: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          description: "Unique identifier for the transaction"
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /balances:
    post:
      summary: Create a new balance
      description: Creates a new balance/account for a user
      tags: [balances]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBalanceRequest'
            example:
              userId: "99bb2200-0011-2233-4455-667788990011"
              groupId: "88aa1100-0011-2233-4455-667788990011"
              currency: "EUR"
              title: "New Checking Account"
              description: "New primary bank account for daily expenses"
              rank: 70
      responses:
        '201':
          description: Balance created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    get:
      summary: List balances
      description: |
        Retrieves a list of balances. At least one of userId or groupId must be provided.
      tags: [balances]
      parameters:
        - name: userId
          in: query
          description: "Filter balances by user ID. Required if groupId is not provided."
          schema:
            type: string
            format: uuid
          example: "99bb2200-0011-2233-4455-667788990011"
        - name: groupId
          in: query
          description: "Filter balances by group ID. Required if userId is not provided."
          schema:
            type: string
            format: uuid
        - name: includeDeleted
          in: query
          description: "Include deleted balances in the response"
          schema:
            type: boolean
            default: false
          example: false
        - name: sortBy
          in: query
          description: "Sort field"
          schema:
            type: string
            enum: [rank, createdAt, updatedAt, title, name]
            default: rank
          example: rank
        - name: order
          in: query
          description: "Sort order"
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          example: "desc"
        - name: limit
          in: query
          description: "Number of items to return"
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          example: 20
      responses:
        '200':
          description: List of balances retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceListResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    options:
      summary: CORS preflight for balances endpoint
      tags: [balances-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

    delete:
      summary: Delete all balances for a user
      description: Soft deletes all balances associated with a specific user ID (bulk delete). The balances will be marked as deleted but remain in the database for data integrity.
      tags: [balances]
      parameters:
        - name: userId
          in: query
          required: true
          description: "User ID to delete all balances for"
          schema:
            type: string
            format: uuid
          example: "99bb2200-0011-2233-4455-667788990011"
      responses:
        '204':
          description: All balances for the user deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

  /balances/{balance_id}:
    get:
      summary: Get balance details
      description: Retrieves a specific balance by ID
      tags: [balances]
      parameters:
        - name: balance_id
          in: path
          required: true
          description: "Unique identifier for the balance"
          schema:
            type: string
            format: uuid
          example: "ba001111-1111-1111-1111-111111111111"
      responses:
        '200':
          description: Balance found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    put:
      summary: Update balance
      description: Updates an existing balance with new data
      tags: [balances]
      parameters:
        - name: balance_id
          in: path
          required: true
          description: "Unique identifier for the balance"
          schema:
            type: string
            format: uuid
          example: "ba001111-1111-1111-1111-111111111111"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBalanceRequest'
            example:
              userId: "99bb2200-0011-2233-4455-667788990011"
              groupId: "88aa1100-0011-2233-4455-667788990011"
              currency: "EUR"
              title: "Updated BBVA Main Account"
              description: "Updated primary checking account at BBVA"
              rank: 65
      responses:
        '200':
          description: Balance updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    delete:
      summary: Delete balance
      description: Soft deletes a specific balance by its ID. The balance will be marked as deleted but remain in the database for data integrity.
      tags: [balances]
      parameters:
        - name: balance_id
          in: path
          required: true
          description: "Unique identifier for the balance to delete"
          schema:
            type: string
            format: uuid
          example: "ba002222-2222-2222-2222-222222222222"
      responses:
        '204':
          description: Balance deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    options:
      summary: CORS preflight for specific balance endpoint
      tags: [balances-cors]
      security: []
      parameters:
        - name: balance_id
          in: path
          required: true
          description: "Unique identifier for the balance"
          schema:
            type: string
            format: uuid
          example: "ba001111-1111-1111-1111-111111111111"
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /categories:
    post:
      summary: Create a new category
      description: Creates a new transaction category
      tags: [categories]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
            example:
              groupId: "88aa1100-0011-2233-4455-667788990011"
              userId: "99bb2200-0011-2233-4455-667788990011"
              categoryGroupId: "c9001234-7890-1234-5678-901234567890"
              name: "Restaurants"
              description: "Dining out at restaurants"
              imageUrl: "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=100&h=100&fit=crop"
              rank: 200
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    get:
      summary: List categories
      description: Retrieves a list of available transaction categories
      tags: [categories]
      parameters:
        - name: userId
          in: query
          description: "Filter categories by user ID (required for user-specific categories)"
          schema:
            type: string
            format: uuid
          example: "99bb2200-0011-2233-4455-667788990011"
        - name: limit
          in: query
          description: "Maximum number of categories to return"
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          example: 20
        - name: sortBy
          in: query
          description: "Field to sort categories by"
          schema:
            type: string
            enum: ["name", "rank", "created_at", "updated_at"]
            default: rank
          example: rank
        - name: order
          in: query
          description: "Sort order"
          schema:
            type: string
            enum: ["asc", "desc"]
            default: "desc"
          example: "desc"
        - name: groupBy
          in: query
          description: "Group categories by specific criteria. When set to 'categoryGroup', returns categories grouped by their category groups"
          schema:
            type: string
            enum: ["categoryGroup"]
          example: "categoryGroup"
      responses:
        '200':
          description: List of categories retrieved successfully. Response structure depends on the groupBy parameter.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CategoryListResponse'
                  - $ref: '#/components/schemas/CategoryGroupedListResponse'
              examples:
                default_list:
                  summary: "Default category list"
                  description: "Response when groupBy parameter is not provided"
                  value:
                    items:
                      - categoryId: "ca001111-1111-1111-1111-111111111111"
                        name: "Restaurants"
                        description: "Dining out at restaurants"
                        imageUrl: "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=100&h=100&fit=crop"
                        rank: 200
                        categoryGroupId: "c9001234-7890-1234-5678-901234567890"
                        categoryGroupName: "Food & Dining"
                        categoryGroupImageUrl: "https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=100&h=100&fit=crop"
                        categoryGroupRank: 10000
                      - categoryId: "ca002222-2222-2222-2222-222222222222"
                        name: "Cafes"
                        description: "Coffee shops and cafes"
                        imageUrl: "https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=100&h=100&fit=crop"
                        rank: 150
                        categoryGroupId: "c9001234-7890-1234-5678-901234567890"
                        categoryGroupName: "Food & Dining"
                        categoryGroupImageUrl: "https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=100&h=100&fit=crop"
                        categoryGroupRank: 10000
                grouped_by_category_group:
                  summary: "Categories grouped by category group"
                  description: "Response when groupBy=categoryGroup"
                  value:
                    items:
                      - categoryGroupId: "c9001234-7890-1234-5678-901234567890"
                        categoryGroupName: "Food & Dining"
                        categoryGroupImageUrl: "https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=100&h=100&fit=crop"
                        categoryGroupRank: 10000
                        categories:
                          - categoryId: "ca001111-1111-1111-1111-111111111111"
                            name: "Restaurants"
                            description: "Dining out at restaurants"
                            imageUrl: "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=100&h=100&fit=crop"
                            rank: 200
                            categoryGroupId: "c9001234-7890-1234-5678-901234567890"
                            categoryGroupName: "Food & Dining"
                            categoryGroupImageUrl: "https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=100&h=100&fit=crop"
                            categoryGroupRank: 10000
                          - categoryId: "ca002222-2222-2222-2222-222222222222"
                            name: "Cafes"
                            description: "Coffee shops and cafes"
                            imageUrl: "https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=100&h=100&fit=crop"
                            rank: 150
                            categoryGroupId: "c9001234-7890-1234-5678-901234567890"
                            categoryGroupName: "Food & Dining"
                            categoryGroupImageUrl: "https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=100&h=100&fit=crop"
                            categoryGroupRank: 10000
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    delete:
      summary: Delete all categories for a user
      description: Deletes all categories for a specific user
      tags: [categories]
      parameters:
        - name: userId
          in: query
          required: true
          description: "User ID for which to delete all categories"
          schema:
            type: string
            format: uuid
          example: "99bb2200-0011-2233-4455-667788990011"
      responses:
        '204':
          description: All categories deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    options:
      summary: CORS preflight for categories endpoint
      tags: [categories-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /categories/{category_id}:
    get:
      summary: Get category by ID
      description: Retrieves a specific category by its unique identifier
      tags: [categories]
      parameters:
        - name: category_id
          in: path
          required: true
          description: "Unique identifier for the category"
          schema:
            type: string
            format: uuid
          example: "ca016666-6666-6666-6666-666666666666"
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
              example:
                categoryId: "ca016666-6666-6666-6666-666666666666"
                name: "Online Courses"
                description: "Online learning and courses"
                imageUrl: "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=100&h=100&fit=crop"
                rank: 1900
                categoryGroupId: "c9089012-7890-1234-5678-901234567890"
                categoryGroupName: "Education"
                categoryGroupImageUrl: "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=100&h=100&fit=crop"
                categoryGroupRank: 2000
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    put:
      summary: Update category
      description: Updates an existing category
      tags: [categories]
      parameters:
        - name: category_id
          in: path
          required: true
          description: "Unique identifier for the category"
          schema:
            type: string
            format: uuid
          example: "ca016666-6666-6666-6666-666666666666"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
            example:
              groupId: "88aa1100-0011-2233-4455-667788990011"
              userId: "99bb2200-0011-2233-4455-667788990011"
              categoryGroupId: "c9089012-7890-1234-5678-901234567890"
              name: "Updated Online Courses"
              description: "Updated online learning and educational courses"
              imageUrl: "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=100&h=100&fit=crop"
              rank: 1950
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
              example:
                categoryId: "ca016666-6666-6666-6666-666666666666"
                name: "Updated Online Courses"
                description: "Updated online learning and educational courses"
                imageUrl: "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=100&h=100&fit=crop"
                rank: 1950
                categoryGroupId: "c9089012-7890-1234-5678-901234567890"
                categoryGroupName: "Education"
                categoryGroupImageUrl: "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=100&h=100&fit=crop"
                categoryGroupRank: 2000
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    delete:
      summary: Delete category
      description: Soft deletes a category
      tags: [categories]
      parameters:
        - name: category_id
          in: path
          required: true
          description: "Unique identifier for the category"
          schema:
            type: string
            format: uuid
          example: "ca016666-6666-6666-6666-666666666666"
      responses:
        '204':
          description: Category deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    options:
      summary: CORS preflight for specific category endpoint
      tags: [categories-cors]
      security: []
      parameters:
        - name: category_id
          in: path
          required: true
          description: "Unique identifier for the category"
          schema:
            type: string
            format: uuid
          example: "ca016666-6666-6666-6666-666666666666"
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /categoryGroups:
    post:
      summary: Create a new category group
      description: Creates a new category group
      tags: [categoryGroups]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryGroupRequest'
            example:
              name: "Food & Dining"
              imageUrl: "https://example.com/food-icon.png"
              rank: 500
      responses:
        '201':
          description: Category group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    get:
      summary: List category groups
      description: |
        Retrieves a list of category groups sorted by rank (descending by default).
      tags: [categoryGroups]
      parameters:
        - name: sortBy
          in: query
          description: "Field to sort by"
          schema:
            type: string
            enum: [rank, name, createdAt, updatedAt]
            default: rank
          example: rank
        - name: order
          in: query
          description: "Sort order"
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          example: "desc"
        - name: limit
          in: query
          description: "Number of items to return"
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          example: 10
      responses:
        '200':
          description: List of category groups retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryGroupListResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    options:
      summary: CORS preflight for category groups endpoint
      tags: [categoryGroups-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /categoryGroups/{category_group_id}:
    get:
      summary: Get category group details
      description: Retrieves a specific category group by ID
      tags: [categoryGroups]
      parameters:
        - name: category_group_id
          in: path
          required: true
          description: "Unique identifier for the category group"
          schema:
            type: string
            format: uuid
          example: "d47ac10b-58cc-4372-a567-0e02b2c3d480"
      responses:
        '200':
          description: Category group details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryGroupResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    put:
      summary: Update category group
      description: Updates an existing category group
      tags: [categoryGroups]
      parameters:
        - name: category_group_id
          in: path
          required: true
          description: "Unique identifier for the category group"
          schema:
            type: string
            format: uuid
          example: "d47ac10b-58cc-4372-a567-0e02b2c3d480"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryGroupRequest'
            example:
              name: "Updated Food & Dining"
              imageUrl: "https://example.com/updated-food-icon.png"
              rank: 600
      responses:
        '200':
          description: Category group updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    delete:
      summary: Delete category group
      description: Soft deletes a category group
      tags: [categoryGroups]
      parameters:
        - name: category_group_id
          in: path
          required: true
          description: "Unique identifier for the category group"
          schema:
            type: string
            format: uuid
          example: "d47ac10b-58cc-4372-a567-0e02b2c3d480"
      responses:
        '204':
          description: Category group deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    options:
      summary: CORS preflight for specific category group endpoint
      tags: [categoryGroups-cors]
      security: []
      parameters:
        - name: category_group_id
          in: path
          required: true
          description: "Unique identifier for the category group"
          schema:
            type: string
            format: uuid
          example: "d47ac10b-58cc-4372-a567-0e02b2c3d480"
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /merchants:
    post:
      summary: Create a new merchant
      description: Creates a new merchant entity
      tags: [merchants]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMerchantRequest'
            example:
              groupId: "88aa1100-0011-2233-4455-667788990011"
              userId: "99bb2200-0011-2233-4455-667788990011"
              name: "Mercadona"
              rank: 50
              description: "Spanish supermarket chain"
              imageUrl: "https://example.com/mercadona-logo.png"
      responses:
        '201':
          description: Merchant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    get:
      summary: List merchants
      description: Retrieves a list of available merchants
      tags: [merchants]
      parameters:
        - name: groupId
          in: query
          description: "Filter merchants by group ID"
          schema:
            type: string
            format: uuid
          example: "88aa1100-0011-2233-4455-667788990011"
        - name: userId
          in: query
          description: "Filter merchants by user ID"
          schema:
            type: string
            format: uuid
          example: "99bb2200-0011-2233-4455-667788990011"
        - name: name
          in: query
          description: "Filter merchants by name (partial match)"
          schema:
            type: string
            minLength: 1
            maxLength: 100
          example: "Mercadona"
        - name: limit
          in: query
          description: "Maximum number of merchants to return"
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          example: 20
        - name: sortBy
          in: query
          description: "Field to sort merchants by"
          schema:
            type: string
            enum: ["rank", "name", "created_at", "updated_at"]
            default: rank
          example: rank
        - name: order
          in: query
          description: "Sort order"
          schema:
            type: string
            enum: ["asc", "desc"]
            default: "desc"
          example: "desc"
      responses:
        '200':
          description: List of merchants retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantListResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    options:
      summary: CORS preflight for merchants endpoint
      tags: [merchants-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

    delete:
      summary: Delete all merchants for a user
      description: Deletes all merchants associated with a specific user ID (bulk delete)
      tags: [merchants]
      parameters:
        - name: userId
          in: query
          required: true
          description: "User ID to delete all merchants for"
          schema:
            type: string
            format: uuid
          example: "99bb2200-0011-2233-4455-667788990011"
      responses:
        '204':
          description: All merchants for the user deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

  /merchants/{merchant_id}:
    get:
      summary: Get merchant details
      description: Retrieves a specific merchant by ID
      tags: [merchants]
      parameters:
        - name: merchant_id
          in: path
          required: true
          description: "Unique identifier for the merchant"
          schema:
            type: string
            format: uuid
          example: "4e001234-1234-5678-9abc-def012345678"
      responses:
        '200':
          description: Merchant found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    put:
      summary: Update merchant
      description: Updates an existing merchant with new data
      tags: [merchants]
      parameters:
        - name: merchant_id
          in: path
          required: true
          description: "Unique identifier for the merchant"
          schema:
            type: string
            format: uuid
          example: "4e001234-1234-5678-9abc-def012345678"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMerchantRequest'
      responses:
        '200':
          description: Merchant updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    delete:
      summary: Delete merchant
      description: Soft deletes a merchant
      tags: [merchants]
      parameters:
        - name: merchant_id
          in: path
          required: true
          description: "Unique identifier for the merchant"
          schema:
            type: string
            format: uuid
          example: "4e001234-1234-5678-9abc-def012345678"
      responses:
        '204':
          description: Merchant deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}

    options:
      summary: CORS preflight for specific merchant endpoint
      tags: [merchants-cors]
      security: []
      parameters:
        - name: merchant_id
          in: path
          required: true
          description: "Unique identifier for the merchant"
          schema:
            type: string
            format: uuid
          example: "4e001234-1234-5678-9abc-def012345678"
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the service
      tags: [system]
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  timestamp:
                    type: string
                    format: date-time
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    options:
      summary: CORS preflight for health endpoint
      tags: [system-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /info:
    get:
      summary: Service information endpoint
      description: Returns information about the service version and configuration
      tags: [system]
      security: []
      responses:
        '200':
          description: Service information
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "ahorro-transactions-service"
                  version:
                    type: string
                    example: "1.0.0"
                  environment:
                    type: string
                    example: "development"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    options:
      summary: CORS preflight for info endpoint
      tags: [system-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /docs:
    get:
      summary: API Documentation (Swagger UI)
      description: Serves an interactive Swagger UI interface for the API documentation
      tags: [system]
      security: []
      responses:
        '200':
          description: Swagger UI HTML page served successfully
          content:
            text/html:
              schema:
                type: string
                description: "HTML page with embedded Swagger UI"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    options:
      summary: CORS preflight for docs endpoint
      tags: [system-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /schema:
    get:
      summary: API Documentation (Swagger UI)
      description: Serves an interactive Swagger UI interface for the API documentation
      tags: [system]
      security: []
      responses:
        '200':
          description: Swagger UI HTML page served successfully
          content:
            text/html:
              schema:
                type: string
                description: "HTML page with embedded Swagger UI"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    options:
      summary: CORS preflight for schema endpoint (Swagger UI)
      tags: [system-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /schema/info:
    get:
      summary: Get schema information
      description: Returns metadata about the embedded OpenAPI schema
      tags: [system]
      security: []
      responses:
        '200':
          description: Schema information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  format:
                    type: string
                    example: "yaml"
                    description: "Format of the schema file"
                  version:
                    type: string
                    example: "3.1.0"
                    description: "OpenAPI specification version"
                  size:
                    type: integer
                    example: 45678
                    description: "Size of the schema in bytes"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    options:
      summary: CORS preflight for schema info endpoint
      tags: [system-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /schema/raw:
    get:
      summary: Get raw OpenAPI schema
      description: Returns the embedded OpenAPI schema in raw YAML format (used by Swagger UI)
      tags: [system]
      security: []
      responses:
        '200':
          description: Raw OpenAPI schema retrieved successfully
          content:
            application/x-yaml:
              schema:
                type: string
                description: "Raw OpenAPI 3.1.0 specification in YAML format"
            text/yaml:
              schema:
                type: string
                description: "Raw OpenAPI 3.1.0 specification in YAML format"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    options:
      summary: CORS preflight for schema raw endpoint
      tags: [system-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

  /schema/json:
    get:
      summary: Get OpenAPI schema in JSON format
      description: Returns the embedded OpenAPI schema converted to JSON format
      tags: [system]
      security: []
      responses:
        '200':
          description: OpenAPI schema in JSON format retrieved successfully
          content:
            application/json:
              schema:
                type: object
                description: "OpenAPI 3.1.0 specification in JSON format"
                properties:
                  openapi:
                    type: string
                    example: "3.1.0"
                  info:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "Ahorro Transactions Service API"
                      version:
                        type: string
                        example: "1.0.0"
                      description:
                        type: string
                        example: "API for managing user transactions, balances, and categories"
                  paths:
                    type: object
                    description: "API endpoints and operations"
                  components:
                    type: object
                    description: "Reusable components including schemas and responses"
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: ${LAMBDA_INVOKE_ARN}
    options:
      summary: CORS preflight for schema JSON endpoint
      tags: [system-cors]
      security: []
      responses:
        '200':
          $ref: '#/components/responses/CorsResponse'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            responseTemplates:
              application/json: '{}'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "AWS Cognito JWT token"

  responses:
    CorsResponse:
      description: "CORS preflight response"
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
            example: "*"
        Access-Control-Allow-Methods:
          schema:
            type: string
            example: "GET,POST,PUT,DELETE,OPTIONS"
        Access-Control-Allow-Headers:
          schema:
            type: string
            example: "Content-Type,Authorization"
      content:
        application/json:
          schema:
            type: object

    BadRequestError:
      description: "Bad request - validation error or missing required fields"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "BadRequest"
            error: "userId is required when groupId is not provided"

    UnauthorizedError:
      description: "Unauthorized - invalid or missing authentication token"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "Unauthorized"
            error: "Invalid or expired authentication token"

    NotFoundError:
      description: "Resource not found"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "NotFound"
            error: "Transaction not found"

    InternalServerError:
      description: "Internal server error"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "InternalServerError"
            error: "An unexpected error occurred"

    ConflictError:
      description: "Conflict - resource limit exceeded or validation error"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "Conflict"
            error: "Maximum 5 transactions allowed per batch"

  schemas:
    ErrorResponse:
      type: object
      required:
        - code
        - error
      properties:
        code:
          type: string
          description: "Error code"
          enum: [BadRequest, Unauthorized, NotFound, InternalServerError, DatabaseError, Conflict]
          example: "BadRequest"
        error:
          type: string
          description: "Human-readable error message"
          example: "userId is required when groupId is not provided"

    CreateTransactionRequest:
      type: object
      required:
        - userId
        - groupId
        - balanceId
        - type
        - transactionEntries
      properties:
        userId:
          type: string
          format: uuid
          description: "Unique identifier for the user"
          example: "02c514a4-2021-708d-efff-ea6cd5e4eac9"
        groupId:
          type: string
          format: uuid
          description: "Unique identifier for the user's group"
          example: "6a785a55-fced-4f13-af78-5c19a39c9abc"
        balanceId:
          type: string
          format: uuid
          description: "Unique identifier for the balance/account"
          example: "847ac10b-58cc-4372-a567-0e02b2c3d479"
        type:
          type: string
          enum: [init, expense, income, move_in, move_out]
          description: "Type of transaction"
          example: "expense"
        merchantId:
          type: string
          format: uuid
          description: "Unique identifier for the merchant (optional for income transactions)"
          example: "4e001234-1234-5678-9abc-def012345678"
        operationId:
          type: string
          format: uuid
          description: "Optional operation ID for tracking"
        approvedAt:
          type: string
          format: date-time
          description: "When the transaction was approved (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        transactedAt:
          type: string
          format: date-time
          description: "When the transaction occurred (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        transactionEntries:
          type: array
          minItems: 1
          maxItems: 50
          description: "List of transaction entries"
          items:
            $ref: '#/components/schemas/CreateTransactionEntry'

    CreateTransactionEntry:
      type: object
      required:
        - description
        - amount
        - categoryId
      properties:
        description:
          type: string
          minLength: 1
          maxLength: 500
          description: "Description of the transaction entry"
          example: "Organic vegetables and fruits"
        amount:
          type: integer
          minimum: 0
          description: "Amount for this entry"
          example: 4550
        categoryId:
          type: string
          format: uuid
          description: "Category ID for this entry"
          example: "c47ac10b-58cc-4372-a567-0e02b2c3d479"

    CreateTransactionsRequest:
      type: object
      required:
        - transactions
      properties:
        transactions:
          type: array
          description: "List of transactions to create"
          minItems: 2
          maxItems: 2
          items:
            $ref: '#/components/schemas/CreateTransactionRequest'
      example:
        transactions:
          - userId: "99bb2200-0011-2233-4455-667788990011"
            groupId: "88aa1100-0011-2233-4455-667788990011"
            balanceId: "ba001111-1111-1111-1111-111111111111"
            type: "move_out"
            transactedAt: "2024-06-19T14:30:00Z"
            transactionEntries:
              - description: "Transfer to savings account"
                amount: 50000
                categoryId: "c47ac10b-58cc-4372-a567-0e02b2c3d4b1"
          - userId: "99bb2200-0011-2233-4455-667788990011"
            groupId: "88aa1100-0011-2233-4455-667788990011"
            balanceId: "ba002222-2222-2222-2222-222222222222"
            type: "move_in"
            transactedAt: "2024-06-19T14:30:00Z"
            transactionEntries:
              - description: "Transfer from checking account"
                amount: 50000
                categoryId: "c47ac10b-58cc-4372-a567-0e02b2c3d4b1"

    CreateTransactionsResponse:
      type: object
      properties:
        transactions:
          type: array
          description: "List of created transactions"
          items:
            $ref: '#/components/schemas/CreateTransactionResponse'
        operationId:
          type: string
          description: "Operation ID for tracking related transactions"
          example: "fa123456-7890-1234-5678-901234567890"

    UpdateTransactionRequest:
      type: object
      required:
        - userId
        - groupId
        - balanceId
        - type
        - transactionEntries
      properties:
        userId:
          type: string
          format: uuid
          description: "Unique identifier for the user"
          example: "02c514a4-2021-708d-efff-ea6cd5e4eac9"
        groupId:
          type: string
          format: uuid
          description: "Unique identifier for the user's group"
          example: "6a785a55-fced-4f13-af78-5c19a39c9abc"
        balanceId:
          type: string
          format: uuid
          description: "Unique identifier for the balance/account"
          example: "847ac10b-58cc-4372-a567-0e02b2c3d479"
        type:
          type: string
          enum: [init, expense, income, move_in, move_out]
          description: "Type of transaction"
          example: "expense"
        merchantId:
          type: string
          format: uuid
          description: "Unique identifier for the merchant"
          example: "4e001234-1234-5678-9abc-def012345678"
        operationId:
          type: string
          format: uuid
          description: "Optional operation ID for tracking"
        approvedAt:
          type: string
          format: date-time
          description: "When the transaction was approved (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        transactedAt:
          type: string
          format: date-time
          description: "When the transaction occurred (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        transactionEntries:
          type: array
          minItems: 1
          maxItems: 50
          description: "List of transaction entries"
          items:
            $ref: '#/components/schemas/CreateTransactionEntry'
    
    SingleTransactionDto:
      type: object
      properties:
        transactionId:
          type: string
          format: uuid
          description: "Unique identifier for the created transaction"
          example: "123e4567-e89b-12d3-a456-426614174000"
        groupId:
          type: string
          format: uuid
          description: "Unique identifier for the user's group"
          example: "6a785a55-fced-4f13-af78-5c19a39c9abc"
        userId:
          type: string
          format: uuid
          description: "Unique identifier for the user"
          example: "02c514a4-2021-708d-efff-ea6cd5e4eac9"
        balanceId:
          type: string
          format: uuid
          description: "Unique identifier for the balance/account"
          example: "847ac10b-58cc-4372-a567-0e02b2c3d479"
        balanceTitle:
          type: string
          description: "Title of the balance/account"
          example: "Main Checking Account"
        balanceCurrency:
          type: string
          description: "Currency of the balance/account"
          example: "EUR"
        type:
          type: string
          enum: [init, expense, income, move_in, move_out]
          description: "Type of transaction"
          example: "expense"
        merchantId:
          type: string
          format: uuid
          description: "Unique identifier for the merchant"
          example: "d47ac10b-58cc-4372-a567-0e02b2c3d479"
        merchantName:
          type: string
          description: "Name of the merchant"
          example: "Mercadona"
        merchantLogo:
          type: string
          description: "URL of the merchant's logo"
          example: "https://example.com/merchants/mercadona-logo.png"
        operationId:
          type: string
          format: uuid
          description: "Operation ID for tracking"
        approvedAt:
          type: string
          format: date-time
          description: "When the transaction was approved (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        transactedAt:
          type: string
          format: date-time
          description: "When the transaction occurred (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        createdAt:
          type: string
          format: date-time
          description: "When the transaction was created (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "When the transaction was last updated (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        transactionEntries:
          type: array
          description: "List of transaction entries"
          items:
            $ref: '#/components/schemas/SingleTransactionEntryDto'
    
    SingleTransactionEntryDto:
      type: object
      properties:
        transactionEntryId:
          type: string
          format: uuid
          description: "Unique identifier for the transaction entry"
          example: "456e7890-e89b-12d3-a456-426614174000"
        description:
          type: string
          description: "Description of the transaction entry"
          example: "Organic vegetables and fruits"
        amount:
          type: integer
          description: "Amount for this entry"
          example: 4550
        categoryId:
          type: string
          format: uuid
          description: "Category ID for this entry"
          example: "c47ac10b-58cc-4372-a567-0e02b2c3d479"
        categoryName:
          type: string
          description: "Name of the category"
          example: "Groceries"
        categoryIcon:
          type: string
          description: "URL of the category icon"
          example: "https://example.com/categories/groceries-icon.png"
        categoryGroupId:
          type: string
          format: uuid
          description: "Category group ID for this entry"
          example: "b47ac10b-58cc-4372-a567-0e02b2c3d4b1"
        categoryGroupName:
          type: string
          description: "Name of the category group"
          example: "Food and Beverages"
        categoryGroupIcon:
          type: string
          description: "URL of the category group icon"
          example: "https://example.com/category-groups/food-icon.png"
        createdAt:
          type: string
          format: date-time
          description: "When the entry was created (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "When the entry was last updated (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        deletedAt:
          type: string
          format: date-time
          description: "When the entry was soft deleted (ISO 8601)"
          example: "2024-06-19T12:00:00Z"

    CreateTransactionResponse:
      type: object
      properties:
        transactionId:
          type: string
          format: uuid
          description: "Unique identifier for the created transaction"
          example: "123e4567-e89b-12d3-a456-426614174000"
        groupId:
          type: string
          format: uuid
          description: "Unique identifier for the user's group"
          example: "6a785a55-fced-4f13-af78-5c19a39c9abc"
        userId:
          type: string
          format: uuid
          description: "Unique identifier for the user"
          example: "02c514a4-2021-708d-efff-ea6cd5e4eac9"
        balanceId:
          type: string
          format: uuid
          description: "Unique identifier for the balance/account"
          example: "847ac10b-58cc-4372-a567-0e02b2c3d479"
        type:
          type: string
          enum: [init, expense, income, move_in, move_out]
          description: "Type of transaction"
          example: "expense"
        merchantId:
          type: string
          format: uuid
          description: "Unique identifier for the merchant"
          example: "d47ac10b-58cc-4372-a567-0e02b2c3d479"
        operationId:
          type: string
          format: uuid
          description: "Operation ID for tracking"
        approvedAt:
          type: string
          format: date-time
          description: "When the transaction was approved (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        transactedAt:
          type: string
          format: date-time
          description: "When the transaction occurred (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        createdAt:
          type: string
          format: date-time
          description: "When the transaction was created (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "When the transaction was last updated (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        transactionEntries:
          type: array
          description: "List of transaction entries"
          items:
            $ref: '#/components/schemas/TransactionEntryResponse'

    TransactionEntryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "Unique identifier for the transaction entry"
          example: "456e7890-e89b-12d3-a456-426614174000"
        description:
          type: string
          description: "Description of the transaction entry"
          example: "Organic vegetables and fruits"
        amount:
          type: integer
          minimum: 0
          description: "Amount for this entry"
          example: 4550
        categoryId:
          type: string
          format: uuid
          description: "Category ID for this entry"
          example: "c47ac10b-58cc-4372-a567-0e02b2c3d479"
        createdAt:
          type: string
          format: date-time
          description: "When the entry was created (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "When the entry was last updated (ISO 8601)"
          example: "2024-06-19T12:00:00Z"

    TransactionEntryListResponse:
      type: object
      properties:
        transactionEntries:
          type: array
          description: "List of flattened transaction entries with all related data"
          items:
            $ref: '#/components/schemas/TransactionEntryDto'

    TransactionEntryDto:
      type: object
      description: "Flattened transaction entry with all related data for listing endpoints"
      properties:
        groupId:
          type: string
          format: uuid
          description: "Unique identifier for the user's group"
          example: "6a785a55-fced-4f13-af78-5c19a39c9abc"
        userId:
          type: string
          format: uuid
          description: "Unique identifier for the user"
          example: "02c514a4-2021-708d-efff-ea6cd5e4eac9"
        balanceId:
          type: string
          format: uuid
          description: "Unique identifier for the balance/account"
          example: "847ac10b-58cc-4372-a567-0e02b2c3d479"
        transactionId:
          type: string
          format: uuid
          description: "Unique identifier for the transaction"
          example: "123e4567-e89b-12d3-a456-426614174000"
        transactionEntryId:
          type: string
          format: uuid
          description: "Unique identifier for the transaction entry"
          example: "456e7890-e89b-12d3-a456-426614174000"
        type:
          type: string
          enum: [init, expense, income, move_in, move_out]
          description: "Type of transaction"
          example: "expense"
        amount:
          type: integer
          description: "Amount for this entry in cents (e.g., $45.50 = 4550)"
          example: -4550
        balanceTitle:
          type: string
          description: "Title of the balance/account"
          example: "Main Checking Account"
        balanceCurrency:
          type: string
          pattern: "^[A-Z]{3}$"
          description: "Currency of the balance"
          example: "EUR"
        balanceDeleted:
          type: boolean
          description: "true if the linked balance is deleted"
        categoryName:
          type: string
          description: "Name of the category"
          example: "Groceries"
        categoryImageUrl:
          type: string
          description: "URL of the category image"
          example: "https://example.com/groceries-icon.png"
        categoryIsDeleted:
          type: boolean
          description: "true if the linked category is deleted"
          example: false
        categoryGroupName:
          type: string
          description: "Name of the category group"
          example: "Food & Dining"
        categoryGroupImageUrl:
          type: string
          nullable: true
          description: "URL of the category group image"
          example: "https://example.com/food-dining-icon.png"
        categoryGroupDeleted:
          type: boolean
          description: "true if categoryGroup is deleted"
          example: false
        merchantName:
          type: string
          description: "Name of the merchant"
          example: "Mercadona"
        merchantImageUrl:
          type: string
          description: "URL of the merchant image"
          example: "https://example.com/mercadona-logo.png"
        operationId:
          type: string
          format: uuid
          description: "Operation ID for tracking"
        approvedAt:
          type: string
          format: date-time
          description: "When the transaction was approved (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        transactedAt:
          type: string
          format: date-time
          description: "When the transaction occurred (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        createdAt:
          type: string
          format: date-time
          description: "When the transaction entry was created (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "When the transaction entry was last updated (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        deletedAt:
          type: string
          format: date-time
          description: "When the transaction entry was soft deleted (ISO 8601, null if not deleted)"
          example: "2024-06-19T12:00:00Z"

    CreateBalanceRequest:
      type: object
      required:
        - userId
        - groupId
        - currency
        - title
      properties:
        userId:
          type: string
          format: uuid
          description: "Unique identifier for the user"
          example: "99bb2200-0011-2233-4455-667788990011"
        groupId:
          type: string
          format: uuid
          description: "Unique identifier for the user's group"
          example: "88aa1100-0011-2233-4455-667788990011"
        currency:
          type: string
          minLength: 3
          maxLength: 3
          pattern: "^[A-Z]{3}$"
          description: "Currency code (ISO 4217)"
          example: "EUR"
        title:
          type: string
          minLength: 1
          maxLength: 100
          description: "Title of the balance/account"
          example: "New Checking Account"
        description:
          type: string
          maxLength: 500
          description: "Optional description of the balance"
          example: "New primary bank account for daily expenses"
        rank:
          type: integer
          description: "Optional rank for ordering balances"
          example: 70

    UpdateBalanceRequest:
      type: object
      required:
        - userId
        - groupId
        - currency
        - title
      properties:
        userId:
          type: string
          format: uuid
          description: "Unique identifier for the user"
          example: "99bb2200-0011-2233-4455-667788990011"
        groupId:
          type: string
          format: uuid
          description: "Unique identifier for the user's group"
          example: "88aa1100-0011-2233-4455-667788990011"
        currency:
          type: string
          minLength: 3
          maxLength: 3
          pattern: "^[A-Z]{3}$"
          description: "Currency code (ISO 4217)"
          example: "EUR"
        title:
          type: string
          minLength: 1
          maxLength: 100
          description: "Title of the balance/account"
          example: "Updated Checking Account"
        description:
          type: string
          maxLength: 500
          description: "Optional description of the balance"
          example: "Updated primary bank account for daily expenses"
        rank:
          type: integer
          description: "Optional rank for ordering balances"
          example: 1

    BalanceResponse:
      type: object
      properties:
        balanceId:
          type: string
          format: uuid
          description: "Unique identifier for the balance"
          example: "ba001111-1111-1111-1111-111111111111"
        groupId:
          type: string
          format: uuid
          description: "Unique identifier for the user's group"
          example: "88aa1100-0011-2233-4455-667788990011"
        userId:
          type: string
          format: uuid
          description: "Unique identifier for the user"
          example: "99bb2200-0011-2233-4455-667788990011"
        currency:
          type: string
          description: "Currency code (ISO 4217)"
          example: "EUR"
        title:
          type: string
          description: "Title of the balance/account"
          example: "Main Checking Account"
        description:
          type: string
          description: "Description of the balance"
          example: "Primary bank account for daily expenses"
        rank:
          type: integer
          description: "Optional rank for ordering balances"
          example: 1
        createdAt:
          type: string
          format: date-time
          description: "When the balance was created (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "When the balance was last updated (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        deletedAt:
          type: string
          format: date-time
          description: "When the balance was deleted (ISO 8601, null if not deleted)"

    BalanceListResponse:
      type: object
      properties:
        items:
          type: array
          description: "List of balances"
          items:
            $ref: '#/components/schemas/BalanceResponse'

    CreateCategoryRequest:
      type: object
      required:
        - groupId
        - userId
        - categoryGroupId
        - name
      properties:
        groupId:
          type: string
          format: uuid
          description: "Group ID this category belongs to"
          example: "88aa1100-0011-2233-4455-667788990011"
        userId:
          type: string
          format: uuid
          description: "User ID this category belongs to"
          example: "99bb2200-0011-2233-4455-667788990011"
        categoryGroupId:
          type: string
          format: uuid
          description: "Category group ID this category belongs to"
          example: "c9001234-7890-1234-5678-901234567890"
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: "Name of the category"
          example: "Restaurants"
        description:
          type: string
          maxLength: 500
          description: "Optional description of the category"
          example: "Dining out at restaurants"
        imageUrl:
          type: string
          format: uri
          description: "Optional URL of the category image"
          example: "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=100&h=100&fit=crop"
        rank:
          type: integer
          minimum: 0
          description: "Optional rank for ordering categories"
          example: 200

    UpdateCategoryRequest:
      type: object
      required:
        - groupId
        - userId
      properties:
        groupId:
          type: string
          format: uuid
          description: "Group ID that the category belongs to"
          example: "88aa1100-0011-2233-4455-667788990011"
        userId:
          type: string
          format: uuid
          description: "User ID that owns the category"
          example: "99bb2200-0011-2233-4455-667788990011"
        categoryGroupId:
          type: string
          format: uuid
          description: "Optional category group ID"
          example: "c9089012-7890-1234-5678-901234567890"
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: "Name of the category"
          example: "Updated Online Courses"
        description:
          type: string
          maxLength: 500
          description: "Optional description of the category"
          example: "Updated online learning and educational courses"
        imageUrl:
          type: string
          format: uri
          description: "Optional URL of the category image"
          example: "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=100&h=100&fit=crop"
        rank:
          type: integer
          minimum: 0
          description: "Optional rank for ordering categories"
          example: 1950

    CategoryResponse:
      type: object
      properties:
        categoryId:
          type: string
          format: uuid
          description: "Unique identifier for the category"
          example: "ca002222-2222-2222-2222-222222222222"
        name:
          type: string
          description: "Name of the category"
          example: "Restaurants"
        description:
          type: string
          description: "Optional description of the category"
          example: "Dining and restaurant expenses"
        imageUrl:
          type: string
          format: uri
          description: "URL of the category image"
          example: "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=100&h=100&fit=crop"
        rank:
          type: integer
          minimum: 0
          description: "Display order rank for the category"
          example: 9800
        isDeleted:
          type: boolean
          description: "true if category is deleted"
          example: false
        categoryGroupId:
          type: string
          format: uuid
          description: "Unique identifier for the category group this category belongs to"
          example: "c9001234-7890-1234-5678-901234567890"
        categoryGroupName:
          type: string
          description: "Name of the category group this category belongs to"
          example: "Food & Dining"
        categoryGroupImageUrl:
          type: string
          format: uri
          description: "URL of the category group image"
          example: "https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=100&h=100&fit=crop"
        categoryGroupDeleted:
          type: boolean
          description: "true if the linked category group is deleted"
          example: false
        categoryGroupRank:
          type: integer
          minimum: 0
          description: "Display order rank for the category group"
          example: 10000

    CategoryListResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          description: "List of categories"
          items:
            $ref: '#/components/schemas/CategoryResponse'

    CategoryGroupWithCategoriesResponse:
      type: object
      required:
        - categoryGroupId
        - categoryGroupName
        - categories
      properties:
        categoryGroupId:
          type: string
          format: uuid
          description: "Unique identifier for the category group"
          example: "c9001234-7890-1234-5678-901234567890"
        categoryGroupName:
          type: string
          description: "Name of the category group"
          example: "Food & Dining"
        categoryGroupImageUrl:
          type: string
          format: uri
          description: "URL of the category group image"
          example: "https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=100&h=100&fit=crop"
        categoryGroupRank:
          type: integer
          minimum: 0
          description: "Display order rank for the category group"
          example: 10000
        categories:
          type: array
          description: "List of categories in this group"
          items:
            $ref: '#/components/schemas/CategoryResponse'

    CategoryGroupedListResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          description: "List of category groups with their categories"
          items:
            $ref: '#/components/schemas/CategoryGroupWithCategoriesResponse'

    CreateCategoryGroupRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: "Name of the category group"
          example: "Food & Dining"
        imageUrl:
          type: string
          format: uri
          description: "Optional URL of the category group image"
          example: "https://example.com/food-icon.png"
        rank:
          type: integer
          minimum: 0
          description: "Display order rank for the category group"
          example: 500

    UpdateCategoryGroupRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: "Name of the category group"
          example: "Updated Food & Dining"
        imageUrl:
          type: string
          format: uri
          description: "Optional URL of the category group image"
          example: "https://example.com/updated-food-icon.png"
        rank:
          type: integer
          minimum: 0
          description: "Display order rank for the category group"
          example: 600

    CategoryGroupResponse:
      type: object
      properties:
        categoryGroupId:
          type: string
          format: uuid
          description: "Unique identifier for the category group"
          example: "d47ac10b-58cc-4372-a567-0e02b2c3d480"
        name:
          type: string
          description: "Name of the category group"
          example: "Food & Dining"
        imageUrl:
          type: string
          format: uri
          description: "URL of the category group image"
          example: "https://example.com/food-icon.png"
        rank:
          type: integer
          description: "Display order rank for the category group"
          example: 500
        isDeleted:
          type: boolean
          description: "Returns true if categoryGroup is deleted"
          example: false
        createdAt:
          type: string
          format: date-time
          description: "When the category group was created (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "When the category group was last updated (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        deletedAt:
          type: string
          format: date-time
          description: "When the category group was deleted (ISO 8601, null if not deleted)"

    CategoryGroupListResponse:
      type: object
      properties:
        categoryGroups:
          type: array
          description: "List of category groups"
          items:
            $ref: '#/components/schemas/CategoryGroupResponse'

    CreateMerchantRequest:
      type: object
      required:
        - name
        - groupId
        - userId
      properties:
        groupId:
          type: string
          format: uuid
          description: "Group ID this merchant belongs to"
          example: "88aa1100-0011-2233-4455-667788990011"
        userId:
          type: string
          format: uuid
          description: "User ID this merchant belongs to"
          example: "99bb2200-0011-2233-4455-667788990011"
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: "Name of the merchant"
          example: "Mercadona"
        description:
          type: string
          maxLength: 500
          description: "Optional description of the merchant"
          example: "Spanish supermarket chain"
        imageUrl:
          type: string
          maxLength: 255
          format: uri
          description: "Optional URL for the merchant's logo/image"
          example: "https://example.com/mercadona-logo.png"
        rank:
          type: integer
          minimum: 0
          description: "Optional rank for ordering merchants"
          example: 1

    UpdateMerchantRequest:
      type: object
      required:
        - name
        - groupId
        - userId
      properties:
        groupId:
          type: string
          format: uuid
          description: "Group ID this merchant belongs to"
          example: "88aa1100-0011-2233-4455-667788990011"
        userId:
          type: string
          format: uuid
          description: "User ID this merchant belongs to"
          example: "99bb2200-0011-2233-4455-667788990011"
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: "Name of the merchant"
          example: "Mercadona Updated"
        description:
          type: string
          maxLength: 500
          description: "Optional description of the merchant"
          example: "Updated Spanish supermarket chain"
        imageUrl:
          type: string
          maxLength: 255
          format: uri
          description: "Optional URL for the merchant's logo/image"
          example: "https://example.com/mercadona-new-logo.png"
        rank:
          type: integer
          minimum: 0
          description: "Optional rank for ordering merchants"
          example: 2

    MerchantResponse:
      type: object
      properties:
        merchantId:
          type: string
          format: uuid
          description: "Unique identifier for the merchant"
          example: "4e001234-1234-5678-9abc-def012345678"
        groupId:
          type: string
          format: uuid
          description: "Group ID this merchant belongs to"
          example: "88aa1100-0011-2233-4455-667788990011"
        userId:
          type: string
          format: uuid
          description: "User ID this merchant belongs to"
          example: "99bb2200-0011-2233-4455-667788990011"
        name:
          type: string
          description: "Name of the merchant"
          example: "Mercadona"
        description:
          type: string
          description: "Description of the merchant"
          example: "Spanish supermarket chain"
        imageUrl:
          type: string
          description: "URL of the merchant's logo/image"
          example: "https://example.com/mercadona-logo.png"
        rank:
          type: integer
          minimum: 0
          description: "Rank for ordering merchants"
          example: 1
        createdAt:
          type: string
          format: date-time
          description: "When the merchant was created (ISO 8601)"
          example: "2024-06-19T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "When the merchant was last updated (ISO 8601)"
          example: "2024-06-19T12:00:00Z"

    MerchantListResponse:
      type: object
      properties:
        merchants:
          type: array
          description: "List of merchants"
          items:
            $ref: '#/components/schemas/MerchantResponse'

    TransactionStatsResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          description: "List of transaction statistics"
          items:
            $ref: '#/components/schemas/TransactionStatsItem'
    
    TransactionStatsItem:
      type: object
      required:
        - label
        - amount
        - currency
        - count
      properties:
        label:
          type: string
          description: "Label for the statistic item"
          example: "Groceries"
        icon:
          type: string
          format: uri
          description: "URL of the icon for the statistic item"
          example: "https://example.com/icons/groceries.png"
        amount:
          type: integer
          minimum: 0
          description: "Total amount in cents"
          example: 125043
        currency:
          type: string
          description: "Currency code (ISO 4217)"
          example: "EUR"
        count:
          type: integer
          minimum: 0
          description: "Number of transactions in the group"
          example: 15

    CurrencyStats:
      type: object
      required:
        - amount
        - transactionsCount
        - transactionEntriesCount
      properties:
        amount:
          type: integer
          minimum: 0
          description: "Total amount in cents"
          example: 125043
        transactionsCount:
          type: integer
          minimum: 0
          description: "Number of unique transactions"
          example: 15
        transactionEntriesCount:
          type: integer
          minimum: 0
          description: "Total number of transaction entries"
          example: 23

x-amazon-apigateway-request-validators:
  validate-all:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: "validate-all"